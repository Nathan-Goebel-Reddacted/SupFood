package com.example.supfood.logic

import androidx.room.*
import com.example.supfood.data.Ingredients
import com.example.supfood.data.IngredientsList
import com.example.supfood.data.Recipe

@Dao
interface RecipeDao {

    // ğŸ”¹ InsÃ©rer une recette dans la base (Remplace si existe dÃ©jÃ )
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertRecipe(recipe: Recipe)

    // ğŸ”¹ InsÃ©rer un ingrÃ©dient dans la base (Retourne l'ID gÃ©nÃ©rÃ©)
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertIngredient(ingredient: Ingredients): Long

    // ğŸ”¹ VÃ©rifier si un ingrÃ©dient existe dÃ©jÃ  en base
    @Query("SELECT * FROM ingredients WHERE name = :name LIMIT 1")
    suspend fun getIngredientByName(name: String): Ingredients?

    // ğŸ”¹ InsÃ©rer un ingrÃ©dient en Ã©vitant les doublons (retourne son ID)
    suspend fun safeInsertIngredient(ingredient: Ingredients): Int {
        val existingIngredient = getIngredientByName(ingredient.name)
        return existingIngredient?.ingredientsId ?: insertIngredient(ingredient).toInt()
    }

    // ğŸ”¹ InsÃ©rer une relation `Recipe <-> Ingredient` (Ã©vite les doublons)
    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertIngredientList(crossRef: IngredientsList)

    // ğŸ”¹ VÃ©rifier si une relation `Recipe <-> Ingredient` existe dÃ©jÃ 
    @Query("""
        SELECT * FROM ingredients_list WHERE ingredientsId = :ingredientId AND recipeId = :recipeId LIMIT 1
    """)
    suspend fun getIngredientListEntry(ingredientId: Int, recipeId: Int): IngredientsList?

    // ğŸ”¹ InsÃ©rer une relation `Recipe <-> Ingredient` uniquement si elle nâ€™existe pas
    suspend fun safeInsertIngredientList(crossRef: IngredientsList) {
        val existingEntry = getIngredientListEntry(crossRef.ingredientsId, crossRef.recipeId)
        if (existingEntry == null) {
            insertIngredientList(crossRef)
        }
    }

    // ğŸ”¹ RÃ©cupÃ©rer une recette spÃ©cifique par son ID
    @Query("SELECT * FROM recipes WHERE recipeId = :id LIMIT 1")
    suspend fun getRecipeById(id: Int): Recipe?

    // ğŸ”¹ RÃ©cupÃ©rer tous les ingrÃ©dients associÃ©s Ã  une recette
    @Query("""
        SELECT ingredients.* FROM ingredients
        INNER JOIN ingredients_list ON ingredients.ingredientsId = ingredients_list.ingredientsId
        WHERE ingredients_list.recipeId = :recipeId
    """)
    suspend fun getIngredientsForRecipe(recipeId: Int): List<Ingredients>

    // ğŸ”¹ RÃ©cupÃ©rer toutes les recettes contenant un ingrÃ©dient spÃ©cifique
    @Query("""
        SELECT recipes.* FROM recipes
        INNER JOIN ingredients_list ON recipes.recipeId = ingredients_list.recipeId
        WHERE ingredients_list.ingredientsId = :ingredientId
    """)
    suspend fun getRecipesForIngredient(ingredientId: Int): List<Recipe>

    // ğŸ”¹ RÃ©cupÃ©rer une recette avec ses ingrÃ©dients en une seule transaction
    @Transaction
    suspend fun getRecipeWithIngredientsMapped(recipeId: Int): Recipe? {
        val recipe = getRecipeById(recipeId) ?: return null
        val ingredients = getIngredientsForRecipe(recipeId).map { it.name } // Convertir en List<String>
        return recipe.apply { ingredientList = ingredients } // Associer la liste dâ€™ingrÃ©dients Ã  Recipe
    }

    // ğŸ”¹ InsÃ©rer une recette et ses ingrÃ©dients en une seule transaction
    @Transaction
    suspend fun saveRecipeWithIngredients(recipe: Recipe, ingredients: List<String>) {
        insertRecipe(recipe) // InsÃ©rer la recette

        for (ingredientName in ingredients) {
            val ingredientId = safeInsertIngredient(Ingredients(0, ingredientName)) // VÃ©rifier si lâ€™ingrÃ©dient existe
            safeInsertIngredientList(IngredientsList(ingredientId, recipe.recipeId)) // Associer lâ€™ingrÃ©dient Ã  la recette
        }
    }
}

